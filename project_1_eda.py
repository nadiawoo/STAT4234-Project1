# -*- coding: utf-8 -*-
"""Project 1 - EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W8m0oY0UwO33zgYXslqJrTcHuqRx4BB3

###Exploratory Data Analysis

# EDA on Merged Data
"""

from google.colab import drive
# Mount Google Drive
drive.mount('/content/drive')

import pandas as pd

# Define the file path
file_path = '/content/drive/My Drive/spotify_df_merged.csv'

# Read the CSV into a DataFrame
spotify_df_merged = pd.read_csv(file_path)

# Display the first few rows to verify
spotify_df_merged.head()

#EXPLORATORY DATA ANALYSIS

# ------------------- Step 1 Summary Statistics -------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns #Seaborn for better visuals

sns.set(style="whitegrid")

#The first step in the EDA is getting the summary stats. That is to get a high-level overview of the numerical features.
'''Summary statistics help us understand:
- Central tendencies (mean, median)
- Spread (standard deviation, min, max)
- Presence of outliers (large gaps between min/max and percentiles)
- Data distributions (skewness)'''

# Summary Statistics
print("\nSummary statistics:")
print(spotify_df_merged.describe())

# Histograms for skewed numerical variables

# ------------------- Step 2 Visualizing Data with Histograms -------------------

''' Histograms help us understand:
- The shape of the distribution** (normal, skewed, bimodal, etc.)
- The spread and density of values
- The presence of **outliers or extreme values '''
import matplotlib.pyplot as plt
import seaborn as sns

# Create a figure with 4 subplots (side by side)
fig, axes = plt.subplots(1, 4, figsize=(20, 10))

# Histogram for Track Duration (Seconds)
sns.histplot(spotify_df_merged['duration_ms'].dropna(), bins=30, ax=axes[0], kde=True)
axes[0].set_title("Track Duration (Milliseconds) Distribution")
axes[0].set_xlabel("Duration (milliseconds)")
axes[0].set_ylabel("Frequency")

# Histogram for Track Duration (Minutes)
sns.histplot(spotify_df_merged['duration_min'].dropna(), bins=30, ax=axes[1], kde=True)
axes[1].set_title("Track Duration (Minutes) Distribution")
axes[1].set_xlabel("Duration (minutes)")
axes[1].set_ylabel("Frequency")

# Histogram for Time Signature
sns.histplot(spotify_df_merged['time_signature'].dropna(), bins=30, ax=axes[2], kde=True)
axes[2].set_title("Time Signature Distribution")
axes[2].set_xlabel("Time Signature")
axes[2].set_ylabel("Frequency")

#Histogram for Key
sns.histplot(spotify_df_merged['key'].dropna(), bins=30, ax=axes[3], kde=True)
axes[3].set_title("Key Distribution")
axes[3].set_xlabel("Key")
axes[3].set_ylabel("Frequency")

plt.show()

fig, axes = plt.subplots(1, 4, figsize=(18, 5))

# Histogram for Tempo
sns.histplot(spotify_df_merged['tempo'].dropna(), bins=30, ax=axes[0], kde=True)
axes[0].set_title("Tempo Distribution")
axes[0].set_xlabel("Tempo (BPM)")
axes[0].set_ylabel("Frequency")

# Histogram for Danceability
sns.histplot(spotify_df_merged['danceability'].dropna(), bins=30, ax=axes[1], kde=True)
axes[1].set_title("Danceability Distribution")
axes[1].set_xlabel("Danceability Score")
axes[1].set_ylabel("Frequency")

# Histogram for Loudness
sns.histplot(spotify_df_merged['loudness'].dropna(), bins=30, ax=axes[2], kde=True)
axes[2].set_title("Loudness Distribution")
axes[2].set_xlabel("Loudness Level")
axes[2].set_ylabel("Frequency")

#Histogram for Acousticness
sns.histplot(spotify_df_merged['acousticness'].dropna(), bins=30, ax=axes[3], kde=True)
axes[3].set_title("Acousticness Distribution")
axes[3].set_xlabel("Acousticness Score")
axes[3].set_ylabel("Frequency")

plt.show()

fig, axes = plt.subplots(1, 4, figsize=(20, 10))

# Histogram for Track Number
sns.histplot(spotify_df_merged['track_number'].dropna(), bins=30, ax=axes[0], kde=True)
axes[0].set_title("Record of Track Numer")
axes[0].set_xlabel("Track Number")
axes[0].set_ylabel("Frequency")

# Histogram for Disc Number
sns.histplot(spotify_df_merged['disc_number'].dropna(), bins=30, ax=axes[1], kde=True)
axes[1].set_title("Record of Disc Numer")
axes[1].set_xlabel("Disc Number")
axes[1].set_ylabel("Frequency")

#Histogram for Speechiness
sns.histplot(spotify_df_merged['speechiness'].dropna(), bins=30, ax=axes[2], kde=True)
axes[2].set_title("Speechiness Distribution")
axes[2].set_xlabel("Speechiness level")
axes[2].set_ylabel("Frequency")

#Histogram for Liveliness
sns.histplot(spotify_df_merged['liveness'].dropna(), bins=30, ax=axes[3], kde=True)
axes[3].set_title("Distribution of liveness")
axes[3].set_xlabel("Liveness Level")
axes[3].set_ylabel("Frequency")

plt.show()

fig, axes = plt.subplots(1, 3, figsize=(18, 5))

# Histogram for Energy
sns.histplot(spotify_df_merged['energy'].dropna(), bins=30, ax=axes[0], kde=True)
axes[0].set_title("Energy Distribution")
axes[0].set_xlabel("Energy Score")
axes[0].set_ylabel("Frequency")

# Histogram for Valence (Happiness)
sns.histplot(spotify_df_merged['valence'].dropna(), bins=30, ax=axes[1], kde=True)
axes[1].set_title("Valence (Happiness) Distribution")
axes[1].set_xlabel("Valence Score")
axes[1].set_ylabel("Frequency")

#Histogram for instrumentalness
sns.histplot(spotify_df_merged['instrumentalness'].dropna(), bins=30, ax=axes[2], kde=True)
axes[2].set_title("Instrumentalness Distribution")
axes[2].set_xlabel("Instrumentalness level")
axes[2].set_ylabel("Frequency")

plt.show()

fig, axes = plt.subplots(1, 3, figsize=(18, 5))

#Histogram for Year
sns.histplot(spotify_df_merged['year'].dropna(), bins=30, ax=axes[0], kde=True)
axes[0].set_title("Distribution of Year")
axes[0].set_xlabel("Year")
axes[0].set_ylabel("Frequency")

#Histogram for Total Grammy Nominations
sns.histplot(spotify_df_merged['total_grammy_nominations'].dropna(), bins=30, ax=axes[1], kde=True)
axes[1].set_title("Distribution of Total Grammy Nominations")
axes[1].set_xlabel("Number of Total Grammy Nominations")
axes[1].set_ylabel("Frequency")

#Histogram for Total Grammy Awards
sns.histplot(spotify_df_merged['total_grammy_awards'].dropna(), bins=30, ax=axes[2], kde=True)
axes[2].set_title("Distribution of Total Grammy Awards")
axes[2].set_xlabel("Number of Total Grammy Awards")
axes[2].set_ylabel("Frequency")

plt.show()

#Exploratory Data Analysis Step 3
#Further visualization

# Bar plots for categorical variables

# Bar plots help us understand:
# - Most frequent categories in the dataset.
# - Distribution of artists, albums, and genres in the dataset.
# - Trends in song releases** over time.


# Identify categorical columns
categorical_cols_spotify_merged = spotify_df_merged.select_dtypes(include=['object']).columns

# Display categorical columns
print("Categorical columns in spotify_df_merged:", categorical_cols_spotify_merged)

import matplotlib.pyplot as plt
import seaborn as sns

# Set up subplots for side-by-side bar plots
fig, axes = plt.subplots(1, 2, figsize=(16, 6))

# Top 10 most frequent artists
top_artists = spotify_df_merged['artists'].value_counts().nlargest(10)
sns.barplot(x=top_artists.values, y=top_artists.index, ax=axes[0], palette="magma")
axes[0].set_title("Top 10 Most Frequent Artists")
axes[0].set_xlabel("Number of Songs")
axes[0].set_ylabel("Artist")

# Top 10 most frequent albums
top_albums = spotify_df_merged['album'].value_counts().nlargest(10)
sns.barplot(x=top_albums.values, y=top_albums.index, ax=axes[1], palette="plasma")
axes[1].set_title("Top 10 Most Frequent Albums")
axes[1].set_xlabel("Number of Songs")
axes[1].set_ylabel("Album")

plt.tight_layout()
plt.show()

# Convert release_date_parsed to datetime if it's not already
spotify_df_merged['release_date_parsed'] = pd.to_datetime(spotify_df_merged['release_date_parsed'], errors='coerce')

# Extract year from release_date_parsed
spotify_df_merged['release_year'] = spotify_df_merged['release_date_parsed'].dt.year

# Count number of songs per year
songs_per_year = spotify_df_merged['release_year'].value_counts().sort_index()

# Plot song release trend
plt.figure(figsize=(12, 6))
sns.lineplot(x=songs_per_year.index, y=songs_per_year.values, marker="o", color='b')
plt.title("Number of Songs Released Over Time")
plt.xlabel("Year")
plt.ylabel("Number of Songs")
plt.grid(True)
plt.show()

# ------------------- Step 4: Analyzing Correlations with a Heatmap -------------------

# In this step, we use a heatmap to visualize correlations between numerical features in the Spotify dataset.
# Correlation analysis helps us:
# - Understand relationships between features.
# - Identify strong positive/negative correlations.
# - Detect redundant or highly correlated features that might affect modeling.

#Using a heatmap for correlation among numerical features. From the spotify data, we can maybe analyze how danceability, energy, loudness, etc. relate.

# Correlation Matrix for numerical columns
num_cols = spotify_df_merged.select_dtypes(include=[np.number]).columns
corr = spotify_df_merged[num_cols].corr()

# Plotting the correlation heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")

plt.title("Correlation Matrix for Spotify Features") # Setting the title
plt.show()

# ------------------- Step 5: Removing Low-Variance Features -------------------

# This step identifies and removes numerical columns that have little to no variance.
# Features with zero or near-zero variance provide no useful information because they do not vary across data points.

import pandas as pd
import numpy as np
from sklearn.feature_selection import VarianceThreshold

# Assuming spotify_df_merged is already loaded
# First, letâ€™s check the variance of the numerical features

# Identify numerical columns in spotify_df_merged
num_features_spotify_merged = spotify_df_merged.select_dtypes(include=[np.number]).columns
variance_spotify_merged = spotify_df_merged[num_features_spotify_merged].var()

# Display variance of numerical features
print("Variance of numerical features in spotify_df_merged:")
print(variance_spotify_merged)

# Apply VarianceThreshold to remove near-zero variance features
threshold = 0.01  # Setting a threshold of 0.01
# Defining a threshold for near-zero variance (0.01 means features with <1% variance are removed)

#spotify_df_merged
vt_spotify_merged = VarianceThreshold(threshold=threshold)
X_num_spotify_merged = spotify_df_merged[num_features_spotify_merged].fillna(0)  # Fill missing values for variance calculation

#for variance calculation
vt_spotify_merged.fit(X_num_spotify_merged) # Apply VarianceThreshold to detect low-variance features
features_to_keep_spotify_merged = X_num_spotify_merged.columns[vt_spotify_merged.get_support()]

#Features to keep
print("\nNumerical features to keep in spotify_df_merged (variance above threshold):")
print(list(features_to_keep_spotify_merged))

#Features to drop
features_to_drop_spotify_merged = set(num_features_spotify_merged) - set(features_to_keep_spotify_merged)
print("\nDropping features from spotify_df_merged:", features_to_drop_spotify_merged)

# Drop near-zero variance features from the dataframe
spotify_df_merged = spotify_df_merged.drop(columns=list(features_to_drop_spotify_merged))

# Display the new shape after dropping near-zero variance features
print("\nShape after dropping near-zero variance features:", spotify_df_merged.shape)

# ------------------- Step 6: Handling Missing Values -------------------

# In this step, we handle missing values in two ways:
# 1. Visualizing missing data to understand the extent of missingness.
# 2. KNN Imputation** for numerical features (uses similar data points to estimate missing values).


import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import KNNImputer # KNN imputation
import pandas as pd

# ------------------- Step 1: Visualizing Missing Values -------------------
# A heatmap helps us identify missing patterns in the dataset.
plt.figure(figsize=(12,6))
sns.heatmap(spotify_df_merged.isnull(), cbar=False, yticklabels=False, cmap='viridis')
plt.title("Missing Values Heatmap")
plt.show()

# ------------------- Step 2: KNN Imputation for Numerical Features -------------------

num_cols = spotify_df_merged.select_dtypes(include=[np.number]).columns  # Select numerical columns
imputer = KNNImputer(n_neighbors=5)  # Initialize KNN imputer

# Apply KNN imputation
spotify_df_merged[num_cols] = imputer.fit_transform(spotify_df_merged[num_cols])

# Check if missing values are removed
print("Missing values after KNN imputation (numerical):")
print(spotify_df_merged[num_cols].isnull().sum())

# Step 3: Impute Categorical Columns Using Mode
cat_cols = spotify_df_merged.select_dtypes(include=["object"]).columns  # Select categorical columns
for col in cat_cols:
    if spotify_df_merged[col].isnull().sum() > 0:
        spotify_df_merged[col] = spotify_df_merged[col].fillna(spotify_df_merged[col].mode()[0])

# Check if categorical missing values are removed
print("\nMissing values after mode imputation (categorical):")
print(spotify_df_merged[cat_cols].isnull().sum())

# ------------------- Step 7: Addressing Outliers -------------------

# In this step, we identify and handle outliers in numerical features.
# Outliers can distort analysis and impact machine learning models.
# Using Box Plots** to detect outliers.
# Applying Winsorization to cap extreme values without removing them.


import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats.mstats import winsorize

#Box Plot for Outliers

#Visualizing outliers in track duration from spotify_df_merged
if 'duration_min' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['duration_min'])
    plt.title("Boxplot: Track Duration (Minutes)")
    plt.show()

# Boxplots help visualize outliers (shown as points outside the whiskers), Interquartile Range (IQR) as well as the median and spread of the data


#Winsorization to Cap Outliers
# Winsorization is used to limit extreme values **without removing them**.
# It caps outliers at the 5th and 95th percentile.

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'duration_min' (if present)
if 'duration_min' in spotify_df_merged.columns:
    spotify_df_merged['duration_min_w'] = winsorize_series(spotify_df_merged['duration_min'], limits=[0.05, 0.05])
    spotify_df_merged['duration_min'] = spotify_df_merged['duration_min_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['duration_min_w'], inplace=True) # Dropping the temporary column

#Outliers in track duration for milliseconds

if 'duration_ms' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['duration_ms'])
    plt.title("Boxplot: Track Duration (Milliseconds)")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'duration_ms' (if present)
if 'duration_ms' in spotify_df_merged.columns:
    spotify_df_merged['duration_ms_w'] = winsorize_series(spotify_df_merged['duration_ms'], limits=[0.05, 0.05])
    spotify_df_merged['duration_ms'] = spotify_df_merged['duration_ms_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['duration_ms_w'], inplace=True) # Dropping the temporary column

#Outliers in track number

if 'track_number' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['track_number'])
    plt.title("Boxplot: Track Number")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'track_number' (if present)
if 'track_number' in spotify_df_merged.columns:
    spotify_df_merged['track_number_w'] = winsorize_series(spotify_df_merged['track_number'], limits=[0.05, 0.05])
    spotify_df_merged['track_number'] = spotify_df_merged['track_number_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['track_number_w'], inplace=True) # Dropping the temporary column

#Outliers in disc number

if 'disc_number' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['disc_number'])
    plt.title("Boxplot: Disc Number")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'disc_number' (if present)
if 'disc_number' in spotify_df_merged.columns:
    spotify_df_merged['disc_number_w'] = winsorize_series(spotify_df_merged['disc_number'], limits=[0.05, 0.05])
    spotify_df_merged['disc_number'] = spotify_df_merged['disc_number_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['disc_number_w'], inplace=True) # Dropping the temporary column

#Outliers in danceability

if 'danceability' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['danceability'])
    plt.title("Boxplot: Danceability")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'danceability' (if present)
if 'danceability' in spotify_df_merged.columns:
    spotify_df_merged['danceability_w'] = winsorize_series(spotify_df_merged['danceability'], limits=[0.05, 0.05])
    spotify_df_merged['danceability'] = spotify_df_merged['danceability_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['danceability_w'], inplace=True) # Dropping the temporary column

#Outliers in energy

if 'energy' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['energy'])
    plt.title("Boxplot: Energy")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'energy' (if present)
if 'energy' in spotify_df_merged.columns:
    spotify_df_merged['energy_w'] = winsorize_series(spotify_df_merged['energy'], limits=[0.05, 0.05])
    spotify_df_merged['energy'] = spotify_df_merged['energy_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['energy_w'], inplace=True) # Dropping the temporary column

#Outliers in key

if 'key' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['key'])
    plt.title("Boxplot: Key")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'key' (if present)
if 'key' in spotify_df_merged.columns:
    spotify_df_merged['key_w'] = winsorize_series(spotify_df_merged['key'], limits=[0.05, 0.05])
    spotify_df_merged['key'] = spotify_df_merged['key_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['key_w'], inplace=True) # Dropping the temporary column

#Outliers in loudness

if 'loudness' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['loudness'])
    plt.title("Boxplot: Loudness")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'loudness' (if present)
if 'loudness' in spotify_df_merged.columns:
    spotify_df_merged['loudness_w'] = winsorize_series(spotify_df_merged['loudness'], limits=[0.05, 0.05])
    spotify_df_merged['loudness'] = spotify_df_merged['loudness_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['loudness_w'], inplace=True) # Dropping the temporary column

#Outliers in speechiness

if 'speechiness' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['speechiness'])
    plt.title("Boxplot: Speechiness")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'speechiness' (if present)
if 'speechiness' in spotify_df_merged.columns:
    spotify_df_merged['speechiness_w'] = winsorize_series(spotify_df_merged['speechiness'], limits=[0.05, 0.05])
    spotify_df_merged['speechiness'] = spotify_df_merged['speechiness_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['speechiness_w'], inplace=True) # Dropping the temporary column

#Outliers in acousticness

if 'acousticness' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['acousticness'])
    plt.title("Boxplot: Acousticness")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'acousticness' (if present)
if 'acousticness' in spotify_df_merged.columns:
    spotify_df_merged['acousticness_w'] = winsorize_series(spotify_df_merged['acousticness'], limits=[0.05, 0.05])
    spotify_df_merged['acousticness'] = spotify_df_merged['acousticness_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['acousticness_w'], inplace=True) # Dropping the temporary column

#Outliers in instrumentalness

if 'instrumentalness' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['instrumentalness'])
    plt.title("Boxplot: Instrumentalness")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'instrumentalness' (if present)
if 'instrumentalness' in spotify_df_merged.columns:
    spotify_df_merged['instrumentalness_w'] = winsorize_series(spotify_df_merged['instrumentalness'], limits=[0.05, 0.05])
    spotify_df_merged['instrumentalness'] = spotify_df_merged['instrumentalness_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['instrumentalness_w'], inplace=True) # Dropping the temporary column

#Outliers in liveness

if 'liveness' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['liveness'])
    plt.title("Boxplot: Liveness")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'liveness' (if present)
if 'liveness' in spotify_df_merged.columns:
    spotify_df_merged['liveness_w'] = winsorize_series(spotify_df_merged['liveness'], limits=[0.05, 0.05])
    spotify_df_merged['liveness'] = spotify_df_merged['liveness_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['liveness_w'], inplace=True) # Dropping the temporary column

#Outliers in valence

if 'valence' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['valence'])
    plt.title("Boxplot: Valence")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'valence' (if present)
if 'valence' in spotify_df_merged.columns:
    spotify_df_merged['valence_w'] = winsorize_series(spotify_df_merged['valence'], limits=[0.05, 0.05])
    spotify_df_merged['valence'] = spotify_df_merged['valence_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['valence_w'], inplace=True) # Dropping the temporary column

#Outliers in tempo

if 'tempo' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['tempo'])
    plt.title("Boxplot: Tempo")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'tempo' (if present)
if 'tempo' in spotify_df_merged.columns:
    spotify_df_merged['tempo_w'] = winsorize_series(spotify_df_merged['tempo'], limits=[0.05, 0.05])
    spotify_df_merged['tempo'] = spotify_df_merged['tempo_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['tempo_w'], inplace=True) # Dropping the temporary column

#Outliers in time_signature

if 'time_signature' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['time_signature'])
    plt.title("Boxplot: Time Signature")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'time_signature' (if present)
if 'time_signature' in spotify_df_merged.columns:
    spotify_df_merged['time_signature_w'] = winsorize_series(spotify_df_merged['time_signature'], limits=[0.05, 0.05])
    spotify_df_merged['time_signature'] = spotify_df_merged['time_signature_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['time_signature_w'], inplace=True) # Dropping the temporary column

#Outliers in year

if 'year' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['year'])
    plt.title("Boxplot: Year")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'year' (if present)
if 'year' in spotify_df_merged.columns:
    spotify_df_merged['year_w'] = winsorize_series(spotify_df_merged['year'], limits=[0.05, 0.05])
    spotify_df_merged['year'] = spotify_df_merged['year_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['year_w'], inplace=True) # Dropping the temporary column

#Outliers in total_grammy_nominations

if 'total_grammy_nominations' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['total_grammy_nominations'])
    plt.title("Boxplot: Total Grammy Nominations")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'total_grammy_nominations' (if present)
if 'total_grammy_nominations' in spotify_df_merged.columns:
    spotify_df_merged['total_grammy_nominations_w'] = winsorize_series(spotify_df_merged['total_grammy_nominations'], limits=[0.05, 0.05])
    spotify_df_merged['total_grammy_nominations'] = spotify_df_merged['total_grammy_nominations_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['total_grammy_nominations_w'], inplace=True) # Dropping the temporary column

#Outliers in total_grammy_awards

if 'total_grammy_awards ' in spotify_df_merged.columns:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=spotify_df_merged['total_grammy_awards '])
    plt.title("Boxplot: Total Grammy Awards")
    plt.show()

def winsorize_series(s, limits=[0.05, 0.05]):
    """Winsorizes the data by capping extreme values at specified percentiles."""
    return winsorize(s, limits=limits)

# Apply winsorization on 'total_grammy_awards' (if present)
if 'total_grammy_awards' in spotify_df_merged.columns:
    spotify_df_merged['total_grammy_awards_w'] = winsorize_series(spotify_df_merged['total_grammy_awards'], limits=[0.05, 0.05])
    spotify_df_merged['total_grammy_awards'] = spotify_df_merged['total_grammy_awards_w'] # Replacing original column with winsorized values
    spotify_df_merged.drop(columns=['total_grammy_awards_w'], inplace=True) # Dropping the temporary column

# ------------------- Step 8: Analyzing Trends with Scatterplots -------------------

# Scatterplots help us identify:
# - Relationships between two numerical variables.
# - Trends, clusters, or patterns in the data.
# - Whether variables are positively, negatively, or not correlated.

#Use of scatterplots to analyze trends. Two examples below:

#Example 1: Relationship between danceability and energy
plt.figure(figsize=(8,6))
sns.scatterplot(x=spotify_df_merged['danceability'], y=spotify_df_merged['energy'], alpha=0.5)
plt.title("Danceability vs. Energy")
plt.xlabel("Danceability")
plt.ylabel("Energy")
plt.show()

#Scatterplot Example 2: Energy vs Loudness
plt.figure(figsize=(8,6))
sns.scatterplot(x=spotify_df_merged['energy'], y=spotify_df_merged['loudness'], alpha=0.5)
plt.title("Energy vs. Loudness")
plt.xlabel("Energy")
plt.ylabel("Loudness (dB)")
plt.show()

# ------------------- Step 9 (Additional Step): Pairplot for Exploring Relationships -------------------

# A pairplot is a great way to:
# - Visualize relationships between multiple numerical features at once.
# - Identify correlations and clusters.
# - Spot patterns or outliers across multiple variables.

#Here the Pairplot will help to explore relationships between key audio features.

import seaborn as sns
import matplotlib.pyplot as plt

#Pairplot for Relationship Exploration

#Selecting a subset of numerical features to avoid overcrowding the pairplot
pairplot_features = ['danceability', 'energy', 'loudness', 'valence', 'tempo', 'acousticness', 'liveness']

#Generate pairplot
sns.pairplot(spotify_df_merged[pairplot_features], diag_kind='kde', plot_kws={'alpha':0.5})
plt.suptitle("Pairplot of Key Audio Features", y=1.02)
plt.show()
#Scatterplots for feature-to-feature relationships.